namespace: ${customer}-${environment}
cfngin_bucket: ${stacker_bucket_name}

package_sources:
  git:
    - uri: ssh://git@bitbucket.org/nbdev/sturdy-stacker-core.git
      branch: ${sturdy_core_branch}
      # tag: ${sturdy_core_version} 

    - uri: ssh://git@bitbucket.org/corpinfo/msp-stacker-modules.git
      tag: msp_hooks_${msp_hooks_version}
      paths:
        - msp-hooks

common_parameters: &common_parameters
  CustomerName: ${customer}
  EnvironmentName: ${environment}

pre_build:
  upload_amilookup_function:
    path: awslambda_hooks.upload_remote_lambda_function_from_local
    data_key: lambda
    args:
      bucket: ${stacker_bucket_name}
      functions:
        CoreAMILookup:
          path: sturdy_stacker_core_blueprints.lambda.ami_lookup
          include:
            - '*.py'
            - '*.txt'
          exclude:
            - '*.pyc'
            - test/

stacks:
  core-chefbuckets:
    enabled: true
    class_path: sturdy_stacker_core_blueprints.chef_buckets.ChefBuckets
    variables:
      <<: *common_parameters
      ChefBucketName: ${default chef_config_bucket_name::undefined}
      ChefDataBucketName: ${default chef_artifact_bucket_name::undefined}
  core-vpc:
    class_path: sturdy_stacker_core_blueprints.vpc.Vpc
    enabled: true
    variables:
      <<: *common_parameters
      VpcInstanceTenancy: ${default vpc_instance_tenancy::default}
      VpcCidr: ${vpc_cidr}
      PublicSubnet1: ${public_subnet_1}
      PublicSubnet2: ${public_subnet_2}
      PublicSubnet3: ${public_subnet_3}
      PrivateSubnet1: ${private_subnet_1}
      PrivateSubnet2: ${private_subnet_2}
      PrivateSubnet3: ${private_subnet_3}
      AzOffset: ${vpc_az_offset}
  core-roles:
    class_path: sturdy_stacker_core_blueprints.roles.Roles
    enabled: true
    variables:
      <<: *common_parameters
      ChefBucketArn: ${output core-chefbuckets::ChefBucketArn}
      ChefDataBucketArn: ${output core-chefbuckets::ChefDataBucketArn}
  core-securitygroups:
    class_path: blueprints.security_groups.SecurityGroups
    enabled: true
    variables:
      <<: *common_parameters
      VpcId: ${output core-vpc::VPC}
  # core-vpneip:
  #   class_path: sturdy_stacker_core_blueprints.vpn_eip.VpnEip
  #   enabled: true
  #   variables:
  #     <<: *common_parameters
  # core-vpnserver:
  #   class_path: sturdy_stacker_core_blueprints.vpn_server.VpnServer
  #   enabled: true
  #   variables:
  #     <<: *common_parameters
  #     # VPC/Networking
  #     CoreVPCStack: ${xref ${common_namespace}-core-vpc::StackName}
  #     VpnEipPublicIp: ${xref ${common_namespace}-core-vpneip::VpnEipPublicIp}
  #     VpcCidr: ${vpc_cidr}
  #     VpcId: ${xref ${common_namespace}-core-vpc::VPC}
  #     # VPN Server Configuration
  #     KeyName: ${ssh_key_name}
  #     BucketKey: ${default vpn_s3_bucket_key::vpnservers}
  #     ChefBucketName: ${xref ${common_namespace}-core-chefbuckets::ChefBucketName}
  #     ChefDataBucketName: ${xref ${common_namespace}-core-chefbuckets::ChefDataBucketName}
  #     ChefClientVersion: ${chef_client_version}
  #     ManagementInstanceType: ${vpn_instance_type}
  #     VPNManagedPolicies: ${xref ${common_namespace}-core-roles::CommonPolicy}
  #     VPNSecurityGroups: ${xref ${common_namespace}-core-securitygroups::AllSecurityGroup},${rxref core-securitygroups::VPNSecurityGroup}
  #     VPNSubnet: ${vpn_subnet}
  #     VPNAMI: ${vpn_ami}
  #     VPNOS: ${vpn_os}
  #     PrivateSubnetCount: ${default private_subnet_count::0}
  #     ChefRunList: ${default vpn_chef_client_runlist::undefined}
  #     VpcInstanceTenancy: ${vpc_instance_tenancy}
  core-chefrun-docs:
    enabled: true
    class_path: sturdy_stacker_core_blueprints.ssm_chefrun_documents.SSMChefRunDocuments
  # core-alert:
  #   enabled: true
  #   class_path: sturdy_stacker_core_blueprints.sns_topic.SnsTopic
  # core-vpnalarm:
  #   enabled: true
  #   class_path: sturdy_stacker_core_blueprints.cw_alarm.CwAlarm
  #   variables:
  #     <<: *common_parameters
  #     AlarmDescription: Alarms when OpenVPN service is found to not be running properly
  #     AlertTopicArn: ${xref ${common_namespace}-core-alert::TopicARN}
  #     AlarmThreshold: 0
  #     EvaluationPeriods: 2
  #     MetricName: service.status
  #     Namespace: OpenVPN
  #     Statistic: Maximum
  #     TreatMissingData: breaching

