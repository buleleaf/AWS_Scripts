---
  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates a VPC with NAT Gateway"
  Mappings:

    SubnetConfig:
      VPC:
        CIDR: "10.99.0.0/16"
      PublicSubDMZ1:
        CIDR: "10.99.1.0/24"
      PublicSubDMZ2:
        CIDR: "10.99.2.0/24"
      PrivateSubApp1:
        CIDR: "10.99.11.0/24"
      PrivateSubApp2:
        CIDR: "10.99.12.0/24"
      PrivateSubDB1:
        CIDR: "10.99.21.0/24"
      PrivateSubDB2:
        CIDR: "10.99.22.0/24"



    # This mapping accounts for the scenario when certain AZs
    # are not available to use (this differs on a per account
    # per customer basis). E.g., if the 'b' AZ is not available
    # in a specific region in one's account then updating the
    # list contained in the mapping below here will allow a
    # different AZ to be chosen.
    AZRegions:
      # ap-northeast-1:
      #   AZs: ["a", "b"]
      # ap-northeast-2:
      #   AZs: ["a", "b"]
      # ap-south-1:
      #   AZs: ["a", "b"]
      # ap-southeast-1:
      #   AZs: ["a", "b"]
      # ap-southeast-2:
      #   AZs: ["a", "b"]
      # ca-central-1:
      #   AZs: ["a", "b"]
      # eu-central-1:
      #   AZs: ["a", "b"]
      # eu-west-1:
      #   AZs: ["a", "b"]
      # eu-west-2:
      #   AZs: ["a", "b"]
      # sa-east-1:
      #   AZs: ["a", "b"]
      # us-east-1:
      #   AZs: ["a", "b"]
      # us-east-2:
      #   AZs: ["a", "b"]
      # us-west-1:
      #   AZs: ["a", "b"]
      us-west-2:
        AZs: ["a", "b"]

  Resources:

    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: "PRACTICE VPC"

    PublicSubDMZ1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PublicSubDMZ1"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: "PublicSubDMZ1"

    PublicSubDMZ2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PublicSubDMZ2"
            - "CIDR"
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: "PublicSubDMZ2"

    PrivateSubApp1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubApp1"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: "PrivateSubApp1"

    PrivateSubApp2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubApp2"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: "PrivateSubApp2"

    PrivateSubDB1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubDB1"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: "PrivateSubDB1"

    PrivateSubDB2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubDB2"
            - "CIDR"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Private"
          -
            Key: "Name"
            Value: "PrivateSubDB2"


    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"

    GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"

    PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: Name
            Value: "PRACTICE - Public RT"
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public RT"

    PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"

    PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubDMZ1"
        RouteTableId:
          Ref: "PublicRouteTable"

    PublicSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubDMZ2"
        RouteTableId:
          Ref: "PublicRouteTable"

    PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Network"
            Value: "Public"

    InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    PublicSubnetNetworkAclAssociation1:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubDMZ1"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    PublicSubnetNetworkAclAssociation2:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubDMZ2"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    ElasticIP1:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"

    NATGateway1:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP1"
            - "AllocationId"
        SubnetId:
          Ref: "PublicSubDMZ2"

    PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
        - Key: Name
          Value: "PRACTICE - Private RT"
        - Key: Network
          Value: "Private RT"
        - Key: Application
          Value:
            Ref: "AWS::StackName"

    PrivateRouteToInternet1:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway1"

    PrivateSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubApp1"
        RouteTableId:
          Ref: "PrivateRouteTable"

    PrivateSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubApp2"
        RouteTableId:
          Ref: "PrivateRouteTable"

    PrivateSubnetRouteTableAssociation3:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubDB1"
        RouteTableId:
          Ref: "PrivateRouteTable"

    PrivateSubnetRouteTableAssociation4:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubDB2"
        RouteTableId:
          Ref: "PrivateRouteTable"

  Outputs:

    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: !Sub "${AWS::StackName}-VPC"

    PublicSubDMZ1:
      Description: "SubnetId of public subnet DMZ1"
      Value:
        Ref: "PublicSubDMZ1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubDMZ1"

    PublicSubDMZ2:
      Description: "SubnetId of public subnet DMZ2"
      Value:
        Ref: "PublicSubDMZ2"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubDMZ2"

    PrivateSubApp1:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubApp1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubApp1"

    PrivateSubApp2:
      Description: "SubnetId of private subnet 1"
      Value:
        Ref: "PrivateSubApp2"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubApp2"

    PrivateSubDB1:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubDB1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubDB1"

    PrivateSubDB2:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubDB2"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubDB2"

    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"