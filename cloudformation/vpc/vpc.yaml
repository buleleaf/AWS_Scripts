AWSTemplateFormatVersion: 2010-09-09
Description: "Network: VPC, Subnets, RouteTables, Internet and NAT Gateways"

Metadata:
 AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Environment
          - VPCBlock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
          - PublicSubnetCCIDR
          - PrivateSubnetACIDR
          - PrivateSubnetBCIDR
          - PrivateSubnetCCIDR

Parameters:
  Environment:
    Type: String
    Default: "TEST"

  VPCBlock:
    Type: String
    Default: '10.5.0.0/16'

  PublicSubnetACIDR:
    Type: String
    Default: '10.5.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR:
    Type: String
    Default: '10.5.20.0/24'
    Description: "Public Subnet-B CIDR"

  PublicSubnetCCIDR:
    Type: String
    Default: '10.5.30.0/24'
    Description: "Public Subnet-B CIDR"

  PrivateSubnetACIDR:
    Type: String
    Default: '10.5.11.0/24'
    Description: "Private Subnet-A CIDR"

  PrivateSubnetBCIDR:
    Type: String
    Default: '10.5.21.0/24'
    Description: "Public Subnet-B CIDR"

  PrivateSubnetCCIDR:
    Type: String
    Default: '10.5.31.0/24'
    Description: "Public Subnet-B CIDR"

Resources:
#============= VPC ==================
  VPC:
    Type: AWS::EC2::VPC
    Properties:                              # Attach Primary CIDR Block
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

#====== Internet Gateway =======
  GatewayInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet:                       # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      InternetGatewayId: !Ref GatewayInternet


#====== VPN Gateway =======
  GatewayVPN:
    Type: "AWS::EC2::VPNGateway"
    Properties: 
      Tags:
        - Key: Name
          Value: !Ref Environment
      Type: "ipsec.1"

  GatewayAttachmentVPN:                       # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      VpnGatewayId: !Ref GatewayVPN


#====== Public RouteTables =========
  RouteTableForPublicSubnet:                       # Creation of Empty Route Table
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTable" ] ]


  RoutesForPublicRouteTable:                     # Creation and Attachment of Routes for Route Table
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachmentInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayInternet
      RouteTableId: !Ref RouteTableForPublicSubnet



#====== Private RouteTables ===========
  RouteTableForPrivateSubnetA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivateRouteTableA" ] ]

  RouteTableForPrivateSubnetB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivateRouteTableB" ] ]

  RouteTableForPrivateSubnetC:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivateRouteTableC" ] ]

#======= Routes for Private Subnet RouteTables using NAT
  RoutesForPrivateRouteTableA:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayA
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTableForPrivateSubnetA
      NatGatewayId: !Ref NATGatewayA

  RoutesForPrivateRouteTableB:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayB
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTableForPrivateSubnetB
      NatGatewayId: !Ref NATGatewayB

  RoutesForPrivateRouteTableC:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayC
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTableForPrivateSubnetC
      NatGatewayId: !Ref NATGatewayC

#====== Associate Public Route for Public Subnets
  RouteAssociationPublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA

  RouteAssociationPublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetB

  RouteAssociationPublicC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetC

#===== Associate Private Route for Private Subnets

  RouteAssociationPrivateA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnetA
      SubnetId: !Ref PrivateSubnetA

  RouteAssociationPrivateB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnetB
      SubnetId: !Ref PrivateSubnetB

  RouteAssociationPrivateC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnetC
      SubnetId: !Ref PrivateSubnetC

 #======= ElasticIP for NAT Gateways ======

  EIP1:
    Type: "AWS::EC2::EIP"
    DependsOn : GatewayAttachmentInternet
    Properties:
      Domain: !Ref VPC

  EIP2:
    Type: "AWS::EC2::EIP"
    DependsOn : GatewayAttachmentInternet
    Properties:
      Domain: !Ref VPC

  EIP3:
    Type: "AWS::EC2::EIP"
    DependsOn : GatewayAttachmentInternet
    Properties:
      Domain: !Ref VPC
#========= NAT Gateways ===============

  NATGatewayA:
    DependsOn: GatewayAttachmentInternet
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId:  !GetAtt EIP1.AllocationId
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-NAT-A" ] ]

  NATGatewayB:
    DependsOn: GatewayAttachmentInternet
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetB
      AllocationId:  !GetAtt EIP2.AllocationId
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-NAT-B" ] ]

  NATGatewayC:
    DependsOn: GatewayAttachmentInternet
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetC
      AllocationId:  !GetAtt EIP3.AllocationId
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-NAT-C" ] ]

#============ ALL Subnets ======================================================
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetACIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-A" ] ]

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetBCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-B" ] ]

  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetCCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-C" ] ]

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PrivateSubnetACIDR"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Private-A" ] ]

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PrivateSubnetBCIDR"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Private-B" ] ]

  PrivateSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PrivateSubnetCCIDR"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Private-C" ] ]

#=================== OUTPUTS ===========================
Outputs:
  VPC:
    Description: ID for the VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "VPC" ] ]

  VPCBlock1:
    Description: Primary CIDR block for the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "Network-CIDR" ] ]

  PublicA:
    Description: ID for Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetA" ] ]

  PublicB:
    Description: ID for Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetB" ] ]

  PublicC:
    Description: ID for Public Subnet C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetC" ] ]

  PrivateA:
    Description: ID for Private Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PrivateSubnetA" ] ]

  PrivateB:
    Description: ID for Private Subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PrivateSubnetB" ] ]

  PrivateC:
    Description: ID for Private Subnet C
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PrivateSubnetC" ] ]